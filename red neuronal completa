{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f327d864",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "\n",
    "#Pandas, para leer el archivo que contiene los datos\n",
    "#Seaborn y Matplotlib para la visualización de gráficos\n",
    "#Tensorflow para crear un modelo de machine learning\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "242fa6c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Leyendo CSV\n"
     ]
    }
   ],
   "source": [
    "print (\"Leyendo CSV\")\n",
    "temperature_df = pd.read_csv(\"celsius_a_fahrenheit.csv\")\n",
    "\n",
    "#leemos los datos que se encuentran en el archivo celsius_a_fahrenheit.csv.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1426477c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Crhistian\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualización scatterplot para mostrar que los datos están correlacionados\n",
    "\n",
    "sns.scatterplot(temperature_df['Celsius'], temperature_df['Fahrenheit'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b5f21895",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Seleccionando las columnas\n"
     ]
    }
   ],
   "source": [
    "#Cargando Set de Datos\n",
    "\n",
    "print (\"Seleccionando las columnas\")\n",
    "X_train = temperature_df['Celsius']\n",
    "y_train = temperature_df['Fahrenheit']\n",
    "\n",
    "#Los datos obtenidos contienen dos columnas. La primer llamada Celsius, como variable independiente. \n",
    "#La segunda, llamada Fahrenheit, como variable objetivo. \n",
    "#una vez entrenado, el modelo será capaz de indicar los grados fahrenheit si le proporcionamos los grados celsius.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44190300",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Creando el modelo\n"
     ]
    }
   ],
   "source": [
    "#Creacion de Modelo\n",
    "\n",
    "print (\"Creando el modelo\")\n",
    "model = tf.keras.Sequential()\n",
    "model.add(tf.keras.layers.Dense(units=1, input_shape=[1]))\n",
    "\n",
    "#keras.Sequential nos permite crear una red neuronal a la que se le agregan “capas” en forma secuencial. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a305a958",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Compilando el modelo\n"
     ]
    }
   ],
   "source": [
    "#Compilado del modelo\n",
    "\n",
    "print (\"Compilando el modelo\")\n",
    "model.compile(optimizer=tf.keras.optimizers.Adam(1), loss='mean_squared_error')\n",
    "\n",
    "# se agregan configuraciones adicionales durante el paso de compilación.\n",
    "# configura un optimizador y una función de pérdida,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8399fada",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entrenando el modelo\n",
      "Epoch 1/100\n",
      "1/1 [==============================] - 1s 822ms/step - loss: 3317.0754\n",
      "Epoch 2/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 1598.2839\n",
      "Epoch 3/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 910.3664\n",
      "Epoch 4/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 1012.6470\n",
      "Epoch 5/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 1362.3097\n",
      "Epoch 6/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 1493.1968\n",
      "Epoch 7/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 1332.5991\n",
      "Epoch 8/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 1022.5332\n",
      "Epoch 9/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 725.1102\n",
      "Epoch 10/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 546.9252\n",
      "Epoch 11/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 515.1142\n",
      "Epoch 12/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 581.2167\n",
      "Epoch 13/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 657.5883\n",
      "Epoch 14/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 672.4545\n",
      "Epoch 15/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 604.9803\n",
      "Epoch 16/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 482.0142\n",
      "Epoch 17/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 352.4546\n",
      "Epoch 18/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 259.9574\n",
      "Epoch 19/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 224.3029\n",
      "Epoch 20/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 235.7644\n",
      "Epoch 21/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 263.9073\n",
      "Epoch 22/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 276.2002\n",
      "Epoch 23/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 255.2912\n",
      "Epoch 24/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 205.1455\n",
      "Epoch 25/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 144.9551\n",
      "Epoch 26/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 96.7511\n",
      "Epoch 27/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 73.8545\n",
      "Epoch 28/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 75.2946\n",
      "Epoch 29/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 88.2444\n",
      "Epoch 30/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 96.5542\n",
      "Epoch 31/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 90.0465\n",
      "Epoch 32/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 69.1176\n",
      "Epoch 33/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 42.7397\n",
      "Epoch 34/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 22.0884\n",
      "Epoch 35/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 13.9499\n",
      "Epoch 36/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 17.4933\n",
      "Epoch 37/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 25.7904\n",
      "Epoch 38/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 30.6917\n",
      "Epoch 39/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 27.7664\n",
      "Epoch 40/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 18.3107\n",
      "Epoch 41/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 7.6313\n",
      "Epoch 42/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 1.1927\n",
      "Epoch 43/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 1.2385\n",
      "Epoch 44/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 5.8597\n",
      "Epoch 45/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 10.7722\n",
      "Epoch 46/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 12.3452\n",
      "Epoch 47/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 9.7819\n",
      "Epoch 48/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 5.1619\n",
      "Epoch 49/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 1.6274\n",
      "Epoch 50/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 1.1546\n",
      "Epoch 51/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 3.4200\n",
      "Epoch 52/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 6.3568\n",
      "Epoch 53/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 7.8014\n",
      "Epoch 54/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 6.9643\n",
      "Epoch 55/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 4.7440\n",
      "Epoch 56/100\n",
      "1/1 [==============================] - 0s 11ms/step - loss: 2.8365\n",
      "Epoch 57/100\n",
      "1/1 [==============================] - 0s 12ms/step - loss: 2.4308\n",
      "Epoch 58/100\n",
      "1/1 [==============================] - 0s 11ms/step - loss: 3.4560\n",
      "Epoch 59/100\n",
      "1/1 [==============================] - 0s 6ms/step - loss: 4.8304\n",
      "Epoch 60/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 5.3912\n",
      "Epoch 61/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 4.7418\n",
      "Epoch 62/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 3.4163\n",
      "Epoch 63/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 2.3427\n",
      "Epoch 64/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 2.1016\n",
      "Epoch 65/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 2.5558\n",
      "Epoch 66/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 3.0709\n",
      "Epoch 67/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 3.0740\n",
      "Epoch 68/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 2.4786\n",
      "Epoch 69/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 1.6729\n",
      "Epoch 70/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 1.1467\n",
      "Epoch 71/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 1.0986\n",
      "Epoch 72/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 1.3309\n",
      "Epoch 73/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 1.4706\n",
      "Epoch 74/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 1.2921\n",
      "Epoch 75/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.8724\n",
      "Epoch 76/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.4796\n",
      "Epoch 77/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.3261\n",
      "Epoch 78/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.4057\n",
      "Epoch 79/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.5352\n",
      "Epoch 80/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.5326\n",
      "Epoch 81/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.3661\n",
      "Epoch 82/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.1544\n",
      "Epoch 83/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.0420\n",
      "Epoch 84/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.0724\n",
      "Epoch 85/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.1681\n",
      "Epoch 86/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.2153\n",
      "Epoch 87/100\n",
      "1/1 [==============================] - 0s 10ms/step - loss: 0.1663\n",
      "Epoch 88/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.0685\n",
      "Epoch 89/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.0063\n",
      "Epoch 90/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.0213\n",
      "Epoch 91/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.0827\n",
      "Epoch 92/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.1257\n",
      "Epoch 93/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.1142\n",
      "Epoch 94/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.0673\n",
      "Epoch 95/100\n",
      "1/1 [==============================] - 0s 9ms/step - loss: 0.0326\n",
      "Epoch 96/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.0385\n",
      "Epoch 97/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.0717\n",
      "Epoch 98/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.0962\n",
      "Epoch 99/100\n",
      "1/1 [==============================] - 0s 7ms/step - loss: 0.0900\n",
      "Epoch 100/100\n",
      "1/1 [==============================] - 0s 8ms/step - loss: 0.0625\n"
     ]
    }
   ],
   "source": [
    "#Entrenando el modelo\n",
    "\n",
    "print (\"Entrenando el modelo\")\n",
    "epochs_hist = model.fit(X_train, y_train, epochs = 100)\n",
    "\n",
    "# se usara fit para entrenar el modelo\n",
    "# parámetros la variable independiente (Grados Celsius) y la variable objetivo (Grados Fahrenheit) \n",
    "# se indica a 100 en la cantidad de veces que se ejecutará el algoritmo (epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "77c9b65f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Evaluando el modelo entrenado\n",
      "Keys:\n",
      "dict_keys(['loss'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Evaluacion del modelo\n",
    "\n",
    "print (\"Evaluando el modelo entrenado\")\n",
    "print (\"Keys:\")\n",
    "print(epochs_hist.history.keys())\n",
    "\t\n",
    "#Grafico\n",
    "plt.plot(epochs_hist.history['loss'])\n",
    "plt.title('Progreso de Pérdida durante Entrenamiento del Modelo')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Training Loss')\n",
    "plt.legend('Training Loss')\n",
    "plt.show()\n",
    "\n",
    "# utilizo epochs_hist.history.keys()  para mostrar el nombre de las llaves\n",
    "# grafico el  dato de nombre  “loss”.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccf08b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "# el grafico muestra que la pérdida (Training_loss)  disminuye a medida que se realizan más iteraciones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "da233bd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 195ms/step\n",
      "Temperatura de Prediccion: [[31.803816]]\n"
     ]
    }
   ],
   "source": [
    "Temp_C = 0\n",
    "Temp_F = model.predict([Temp_C])\n",
    "print(\"Temperatura de Prediccion: \" + str(Temp_F))\n",
    "\n",
    "#Realizo una predicción.\n",
    "#De un valor en grados Celsius (Temp_C) y el modelo nos devuelve el resultado que el cree correcto en grados Fahrenheit (Temp_F)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "338db5ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temperatura de Ecuacion: 32.0\n"
     ]
    }
   ],
   "source": [
    "Temp_F = 9/5 * Temp_C + 32\n",
    "print(\"Temperatura de Ecuacion: \" + str(Temp_F))\n",
    "\n",
    "#resultado utilizando un fórmula matemática, para corroborar qué tan cercana fue la predicción que el modelo arrojó."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70f7d93e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# resultado correcto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79bec53a",
   "metadata": {},
   "outputs": [],
   "source": [
    " Se creó un modelo de Red Neuronal que nos permite convertir grados celsius a grados Fahrenheit sin utilizar una fórmula, \n",
    "utilizando una biblioteca código abierto “TensorFlow”. \n",
    "\n",
    "Se le proporciono al modelo un set  de unos 30 datos contenidos en dos columnas, de ejemplos de conversión y con base en ellos,\n",
    "el modelo “aprendió” cómo convertir grados Celsius a grados Fahrenheit; Pasos:\n",
    "    \n",
    "1. Se importaron librerías.\n",
    "2. Se leyeron los datos del archivo de celsius_a_fahrenheit.csv.\n",
    "3. Se visualizó la correlación de los datos.\n",
    "4. Se cargó el set de datos.\n",
    "5. Se creó el modelo.\n",
    "6. Se compilo el modelo.\n",
    "7. Se entrenó el modelo.\n",
    "8. Se evaluó el modelo.\n",
    "9. Se realizó una predicción. \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
